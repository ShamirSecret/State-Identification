{"version":3,"file":"static/js/964.10d76598.chunk.js","mappings":"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","sources":["pages/order/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { App , Spin , Pagination ,Button, Modal} from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport {useStore} from '../../utils/store'\nimport copy from 'copy-to-clipboard';\nimport {request} from '../../api/request'\nimport {Link, useLocation} from 'react-router-dom'\n\nfunction Order() {\n\n    const {t, i18n} = useTranslation()\n    const {message} = App.useApp()\n    const [state, dispatch] = useStore();\n    const [isTotal, setIsTotal] = useState<number>()\n    const [isList, setIsList] = useState<any>([])\n    const [isUserList, setIsUserList] = useState<any>([])\n    const [nowPage, setNowPage] = useState(1);\n\n    const pageSize = 8;\n    \n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n\n    const handleOk = () => {\n        setIsModalOpen(false);\n    };\n\n    const handleCancel = () => {\n        setIsModalOpen(false);\n    };\n    \n    \n    const getList =  async (value: any) => {\n        try {\n            const res = await request.get(\"/sellpost/user_self_sold_posts\", {\n                params: {\n                    sort_by: 1,\n                    page: value,\n                    per_page: pageSize\n                },\n            });\n           const { sold_posts, pagination } = res.data.data;\n            if (res.data.code === 200) {\n\n                    setIsList(sold_posts)\n                    setIsTotal(pagination.total)\n            }\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    \n    const onChange = (page: any) => {\n        setNowPage(page)\n        getList(page)\n     }\n\n\n    const IntegralTotal = () => {\n        if (!isTotal) {\n            return (<Spin />)\n        } else {\n            return (\n                <>{isTotal}</>\n                )\n        }\n\n    }\n    \n    const  getDetails = async (value: any) => {\n        setIsModalOpen(true);\n        setIsUserList(value)\n    }     \n\n\n    let ignore = false;\n\n    useEffect(() => {\n        async function startFetching() {\n            if (!ignore) {\n                if(state.userName){\n                    getList(1)\n                }\n            }\n        }\n\n        startFetching();\n\n        return () => {\n            ignore = true;\n        };\n\n        }, []);\n\n\n\n    return (\n        <div className=\"db-table-main\">\n            {state.userName ? (<>\n            {isList &&\n                isList.length > 0 &&\n                isList.map((item: any, index: number) => (\n                    <div className=\"list-item-info\"   key={index}>\n                        <div className=\"item-title\">{item.post.attributes[0]['title']}</div>\n                        <div className=\"item-title\">{t(\"unitprice\")}：{item.post['price']}  point</div>\n                        <div className=\"item-title\">{t(\"PurchaseQuantity\")}：{item.customers.length}</div>\n                        <div className=\"item-title\">{t(\"TotalTA\")}：{(item.customers.length * item.post['price'] * 0.5 * 10000)/10000}  point</div>\n                        <div className=\"item-foot\">\n                            <span className=\"db-table-time\" onClick={() => getDetails(item.customers)}>{t(\"PurchaseDetails\")}</span>\n                        </div>\n                    </div>\n                   ))}\n            {isList &&\n                isList.length > 0 ? (\n                    <Pagination\n                        defaultCurrent={1}\n                        total={isTotal}\n                        pageSize={pageSize}\n                        onChange={onChange}\n                        current={nowPage}\n                    />) : (\n                        <></>\n                        )}\n            </>) : (<></>)}\n            <Modal title={t(\"PurchaseDetails\")} open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n                <div className=\"db-buy-info\">\n                    <span className=\"db-buy-people\"><b>{t(\"BuyPrice\")}</b></span>\n                    <span className=\"db-buy-people\"><b>{t(\"Buyingtime\")}</b></span>\n                </div> \n                {isUserList &&\n                isUserList.length > 0 &&\n                isUserList.map((items: any, inx: number) => (\n                    <div className=\"db-buy-info\"  key={inx}>\n                        <span className=\"db-buy-people\">\n                            {items.username > 18\n                                ? items.username.slice(0, 8) + \"...\" +items.username.slice(-7)\n                                : items.username\n                            }</span>\n                        <span className=\"db-buy-people\">{items.timestamp}</span>\n                    </div>\n                 ))}\n            </Modal>\n        </div>\n        )\n}\n\nexport default Order;"],"names":["t","i18n","useTranslation","message","App","useApp","state","dispatch","useStore","isTotal","setIsTotal","useState","isList","setIsList","isUserList","setIsUserList","nowPage","setNowPage","isModalOpen","setIsModalOpen","getList","async","res","request","get","params","sort_by","page","value","per_page","sold_posts","pagination","data","code","total","error","console","log","ignore","useEffect","userName","startFetching","_jsxs","className","children","_Fragment","length","map","item","index","_jsx","post","attributes","customers","onClick","getDetails","Pagination","defaultCurrent","pageSize","onChange","current","Modal","title","open","onOk","handleOk","onCancel","handleCancel","items","inx","username","slice","timestamp"],"sourceRoot":""}