{"version":3,"file":"static/js/846.f69cd776.chunk.js","mappings":"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","sources":["components/limitorder.tsx","components/marketorder.tsx","pages/trade/index.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {message, Modal ,App ,  Form , Input , Select , Button , InputNumber} from 'antd';\nimport {useTranslation} from 'react-i18next';\nimport {request} from '../api/request'\nimport useWindowSize from '../utils/useWindowSize'\n\n\ninterface ArrayProps {\n    operDialogFunc: any\n    vis:boolean\n    postId:any\n}\n\n\nexport default function LimitOrder(props: ArrayProps) {\n\n    const {t, i18n} = useTranslation()\n    let {operDialogFunc,vis , postId} = props;\n    const { width, height } = useWindowSize()\n    const [loadings, setLoadings] = useState<boolean[]>([]);\n    const [isOffset,setIsOffset] = useState(5)\n\n    const {message} = App.useApp()\n\n    const [isVisable,setIsVisable] = useState(false)\n    const [form] = Form.useForm()\n    const onFinish = async(value: any) => {\n        setLoadings((prevLoadings) => {\n            const newLoadings = [...prevLoadings];\n            newLoadings[0] = true;\n            return newLoadings;\n        });\n        value.post_id = props.postId\n        try {\n            await request.post('/point_trade/submit_limit_order', value).then(res => {\n                setLoadings((prevLoadings) => {\n                    const newLoadings = [...prevLoadings];\n                    newLoadings[0] = false;\n                    return newLoadings;\n                });\n                if (res.data.message == \"Limit order submitted successfully\") {\n                    message.success(`${t('SubmitTrue')}`)\n                    operDialogFunc(false)\n                } else {\n                    message.error(res.data.message)\n                }\n            })\n        } catch (error) {\n            setLoadings((prevLoadings) => {\n                const newLoadings = [...prevLoadings];\n                newLoadings[0] = false;\n                return newLoadings;\n            });\n            message.error(`${t('DataError')}`)\n        }\n\n    };\n\n    const handleCancel = () => {\n        operDialogFunc(false)\n    };\n\n\n    const onFinishFailed = (errorInfo: any) => {\n        //console.log('Failed:', errorInfo);\n    };\n\n    useEffect(()=>{\n        setIsVisable(vis)\n    },[vis])\n    \n    let ignore = false;\n\n    useEffect(() => {\n\n        async function startFetching() {\n            if (!ignore) {\n                if(width>767){\n                    setIsOffset(5)\n                }else{\n                    setIsOffset(0)\n                }\n            }\n        }\n\n        startFetching();\n\n        return () => {\n            ignore = true;\n        };\n\n   }, [width]);\n\n    return(\n        <Modal\n            title={t('limitorder')}\n            open={isVisable}\n            onCancel={handleCancel}\n            footer={\n                [] \n             }\n            >\n                <Form\n                    name=\"limitorder\"\n                    labelCol={{span: 5}}\n                    wrapperCol={{span: 16}}\n                    style={{maxWidth: 600}}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                    form={form}\n                    >\n                    <Form.Item label={t('direction')} name=\"side\"\n                        rules={[{required: true, message: `${t('Required')}`}]}>\n                        <Select>\n                            <Select.Option value=\"buy\">{t('limitBuy')}</Select.Option>\n                            <Select.Option value=\"sell\">{t('limitSell')}</Select.Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        label={t('quantity')}\n                        name=\"quantity\"\n                        rules={[\n                        {\n                            required: true,\n                            message: `${t('Required')}`,\n                        }\n                    ]}\n                        >\n                        <Input/>\n                    </Form.Item>\n                    <Form.Item label={t('Assettype')} name=\"symbol\"\n                        rules={[{required: true, message: `${t('Required')}`}]}>\n                        <Select>\n                            <Select.Option value=\"BTC\">BTC</Select.Option>\n                            <Select.Option value=\"ETH\">ETH</Select.Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        label={t('Price')}\n                        name=\"price\"\n                        rules={[\n                        {\n                            required: true,\n                            message: `${t('Required')}`,\n                        }\n                    ]}\n                        >\n                        <Input/>\n                    </Form.Item>\n                    <Form.Item wrapperCol={{offset: isOffset, span: 16}}>\n                        <Button type=\"primary\" htmlType=\"submit\" loading={loadings[0]}>\n                            {t('Submit')}\n                        </Button>\n                        <Button htmlType=\"reset\">{t('reset')}</Button>\n                    </Form.Item>\n                </Form>\n        </Modal>\n        )\n}\n","import React, {useState, useEffect} from 'react';\nimport {message, Modal ,App , Form , Input , Select , Button , InputNumber} from 'antd';\nimport {useTranslation} from 'react-i18next';\nimport {request} from '../api/request'\nimport useWindowSize from '../utils/useWindowSize'\n\ninterface ArrayProps {\n    operDialogMarket: any\n    visMarket:boolean\n    postIdMarket:any\n}\n\n\nexport default function MarketOrder(props: ArrayProps) {\n\n    const {t, i18n} = useTranslation()\n    let {operDialogMarket,visMarket , postIdMarket} = props;\n    const { width, height } = useWindowSize()\n    const [loadings, setLoadings] = useState<boolean[]>([]);\n    const [isOffset,setIsOffset] = useState(5)\n    \n    const {message} = App.useApp()\n\n    const [isVisable,setIsVisable] = useState(false)\n    const [form] = Form.useForm()\n    const onFinish = async(value: any) => {\n        setLoadings((prevLoadings) => {\n            const newLoadings = [...prevLoadings];\n            newLoadings[0] = true;\n            return newLoadings;\n        });\n        value.post_id = props.postIdMarket\n        try {\n            await request.post('/point_trade/submit_market_order', value).then(res => {\n                setLoadings((prevLoadings) => {\n                    const newLoadings = [...prevLoadings];\n                    newLoadings[0] = false;\n                    return newLoadings;\n                });\n                if (res.data.message == \"Market order submitted successfully\") {\n                    message.success(`${t('SubmitTrue')}`)\n                    operDialogMarket(false)\n                } else {\n                    message.error(res.data.message)\n                }\n            })\n        } catch (error) {\n            setLoadings((prevLoadings) => {\n                const newLoadings = [...prevLoadings];\n                newLoadings[0] = false;\n                return newLoadings;\n            });\n            message.error(`${t('DataError')}`)\n        }\n\n    };\n\n    const handleCancel = () => {\n        operDialogMarket(false)\n    };\n\n\n    const onFinishFailed = (errorInfo: any) => {\n        //console.log('Failed:', errorInfo);\n    };\n\n    useEffect(()=>{\n        setIsVisable(visMarket)\n    },[visMarket])\n    \n    let ignore = false;\n\n    useEffect(() => {\n\n        async function startFetching() {\n            if (!ignore) {\n                if(width>767){\n                    setIsOffset(5)\n                }else{\n                    setIsOffset(0)\n                }\n            }\n        }\n\n        startFetching();\n\n        return () => {\n            ignore = true;\n        };\n\n        }, [width]);\n\n    return(\n        <Modal\n            title={t('marketorder')}\n            open={isVisable}\n            onCancel={handleCancel}\n            footer={\n                [] \n             }\n            >\n                <Form\n                    name=\"marketorder\"\n                    labelCol={{span: 5}}\n                    wrapperCol={{span: 16}}\n                    style={{maxWidth: 600}}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                    form={form}\n                    >\n                    <Form.Item label={t('direction')} name=\"side\"\n                        rules={[{required: true, message: `${t('Required')}`}]}>\n                        <Select>\n                            <Select.Option value=\"buy\">{t('limitBuy')}</Select.Option>\n                            <Select.Option value=\"sell\">{t('limitSell')}</Select.Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        label={t('quantity')}\n                        name=\"quantity\"\n                        rules={[\n                        {\n                            required: true,\n                            message: `${t('Required')}`,\n                        }\n                    ]}\n                        >\n                        <Input/>\n                    </Form.Item>\n                    <Form.Item label={t('Assettype')} name=\"symbol\"\n                        rules={[{required: true, message: `${t('Required')}`}]}>\n                        <Select>\n                            <Select.Option value=\"BTC\">BTC</Select.Option>\n                            <Select.Option value=\"ETH\">ETH</Select.Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item wrapperCol={{offset: isOffset, span: 16}}>\n                        <Button type=\"primary\" htmlType=\"submit\" loading={loadings[0]}>\n                            {t('Submit')}\n                        </Button>\n                        <Button htmlType=\"reset\">{t('reset')}</Button>\n                    </Form.Item>\n                </Form>\n        </Modal>\n        )\n}\n","import React, {useState, useEffect, useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport { Link , useNavigate } from 'react-router-dom'\nimport {request} from '../../api/request'\nimport {useStore} from '../../utils/store'\nimport { Select , Modal , App} from 'antd';\nimport LimitOrder from '../../components/limitorder'\nimport MarketOrder from '../../components/marketorder'\n\nfunction Trade() {\n    const {t, i18n} = useTranslation()\n    const [state, dispatch] = useStore()\n    const {message} = App.useApp()\n    const [visiable,setVisiable] = useState(false)\n    const [MarketVisiable,setMarketVisiable] = useState(false)\n    const operDialogFunc = (flag:any)=>{\n        if(state.userId){\n            setVisiable(flag)\n        }else{\n            message.error(`${t(\"ErrorUser\")}`)\n        }\n    }\n\n    const operDialogMarket = (flag:any)=>{\n        if(state.userId){\n            setMarketVisiable(flag)\n        }else{\n            message.error(`${t(\"ErrorUser\")}`)\n        }\n    }\n\n    let ignore = false;\n\n    useEffect(() => {\n        async function startFetching() {\n            if (!ignore) {\n                \n            }\n        }\n\n        startFetching();\n\n        return () => {\n            ignore = true;\n        };\n\n        }, []);\n\n\n    return (\n        <div className=\"index-content status-content\">\n            <div className=\"setting-item\">\n                <div className=\"item-title item-title-button\">\n                    <div className=\"peo-reg\" onClick={()=>operDialogMarket(true)}>{t(\"marketorder\")}</div>\n                    <div className=\"peo-reg\" onClick={()=>operDialogFunc(true)}> {t(\"limittorder\")}</div>\n                </div>\n                <div className=\"item-info item-info-a\">\n                </div>\n            </div>\n            <LimitOrder vis={visiable} operDialogFunc={operDialogFunc} postId={1}/>\n            <MarketOrder visMarket={MarketVisiable} operDialogMarket={operDialogMarket} postIdMarket={1}/>\n        </div>\n        )\n}\n\nexport default Trade;"],"names":["LimitOrder","props","t","i18n","useTranslation","operDialogFunc","vis","postId","width","height","useWindowSize","loadings","setLoadings","useState","isOffset","setIsOffset","message","App","useApp","isVisable","setIsVisable","form","Form","useForm","useEffect","ignore","async","startFetching","_jsx","Modal","title","open","onCancel","handleCancel","footer","children","_jsxs","name","labelCol","span","wrapperCol","style","maxWidth","onFinish","prevLoadings","newLoadings","value","post_id","request","post","then","res","data","success","error","onFinishFailed","errorInfo","autoComplete","Item","label","rules","required","Select","Option","Input","offset","Button","type","htmlType","loading","MarketOrder","operDialogMarket","visMarket","postIdMarket","state","dispatch","useStore","visiable","setVisiable","MarketVisiable","setMarketVisiable","flag","userId","className","onClick"],"sourceRoot":""}